为什么需要代理模式？
在不修改类的基础上，对类的功能附件与增强

讲讲静态代理模式的优点及其瓶颈？
程序可读性高，保证了业务类的重用性能，
代理对象的一个接口只服务一种类型的对象，如果要代理的方法很多，则需要写很多代码为每一个方法进行代理

对Java 接口代理模式的实现原理的理解？
实现InvocationHandler接口，
通过Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),this)创建实例，

如何使用 Java 反射实现动态代理？
Java 接口代理模式的指定增强？

谈谈对Cglib 类增强动态代理的实现？

怎么理解面向切面编程的切面？
业务逻辑又进行了进一步的抽取，做成统一的服务，实现代码复用

讲解OOP与AOP的简单对比？
OOP主要针对业务

讲解JDK 动态代理和 CGLIB 代理原理以及区别？
对接口自动生成代理类
对类生成子类的方式实现代理

讲解Spring 框架中基于 Schema 的 AOP 实现原理？

讲解Spring 框架中如何基于 AOP 实现的事务管理？

Spring事务传播机制
传播行为	含义
PROPAGATION_REQUIRED	表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务
PROPAGATION_SUPPORTS	表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行
PROPAGATION_MANDATORY	表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常
PROPAGATION_REQUIRED_NEW	表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager
PROPAGATION_NOT_SUPPORTED	表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager
PROPAGATION_NEVER	表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常
PROPAGATION_NESTED	表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。
			注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务

@Transactional的参数
value 事务管理器
transactionManager 
propagation 传播机制
isolation 隔离级别
timeout 超时时间
readOnly 是否只读
rollbackFor 异常
rollbackForClassName
noRollbackFor
noRollbackForClassName
@Transactional 注解只能应用到 public 可见度的方法上。
失败的原理是：@Transactional是基于动态代理来实现的，非public的方法，他@Transactional的动态代理对象信息为空，所以不能回滚。
2.在类内部没有添加@Transactional的方法，调用了@Transactional方法时，当你调用时，他也不会回滚
失败的原理：@Transactional是基于动态代理对象来实现的，而在类内部的方法的调用是通过this关键字来实现的，没有经过动态代理对象，所以事务回滚失效。
默认情况下，Spring会对unchecked异常进行事务回滚；如果是checked异常则不回滚。 
辣么什么是checked异常，编译时候需要手工设置捕获或者抛出异常，否则编译失败
什么是unchecked异常，在运行时抛出的异常，空指针，数组越界等

只读事务： 
@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true) 


谈谈对控制反转的设计思想的理解？

怎么理解 Spring IOC 容器？

Spring IOC 怎么管理 Bean 之间的依赖关系，怎么避免循环依赖？
三级缓存
singletonObjects：单例对象的cache 一级
earlySingletonObjects ：提前暴光的单例对象的Cache 。【用于检测循环引用，与singletonFactories互斥】 二级
singletonFactories ： 单例对象工厂的cache  三级
能解决setter方式注入，不能解决构造器注入
A先完成初始化第一步，然后将自己提前曝光到三级缓存里面，
B初始化，从一级找，找不到A,从二级找找不到A,从三级找找到A,然后初始化完毕，


对Spring IOC 容器的依赖注入的理解？
应用程序依赖spring容器注入某个应用程序的某个对象

说说对Spring IOC 的单例模式和高级特性？

BeanFactory 和 FactoryBean 有什么区别？
BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。
但对FactoryBean而言，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似 

BeanFactory 和 ApplicationContext 又有什么不同？
ApplicationContext接口,它由BeanFactory接口派生而来，ApplicationContext包含BeanFactory的所有功能

谈谈Spring Bean 创建过程中的设计模式？
spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得bean对象

SrpingBean的生命周期
实例化：构造器注入或者简单实例化
设置bean的Aware：BeanNameAware，BeanClassLoaderAware，ResourceLoaderAware,ApplicationContextAware,BeanFactoryAware
BeanPostProcessor.postProcessBeforeInitialization(Object bean, String beanName) 后置处理器在初始化之前的工作
InitializingBean.afterPorpertiesSet     bean的属性设置
BeanPostProcessor.postProcessAfterInitialization(Object bean, String beanName)  后置处理器在初始化之后的工作
SmartInitializingSingleton.afterSingletonsInstantiated 单例bean在初始化之后的设置
SmartLifecycle.start 生命周期开始
bean已经在spring容器的管理下，可以做我们想做的事
SmartLifecycle.stop(Runnable callback) 生命周期停止
DisposableBean.destroy() bean销毁

Spring AOP / AspectJ AOP 的区别？
Spring AOP属于运行时增强，而AspectJ是编译时增强。
Spring AOP基于代理（Proxying），
而AspectJ基于字节码操作（Bytecode Manipulation）。AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。如果切面比较少，
那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比SpringAOP快很多。

@Autowired是spring框架提供的实现依赖注入的注解，主要支持在set方法，field，构造函数中完成bean注入，
注入方式为通过类型查找bean，即byType的，如果存在多个同一类型的bean，则使用@Qualifier来指定注入哪个beanName的bean
@Autowired和spring一起工作，通过反射为这个成员变量赋值，也就是将其赋为期望的类实例
@Autowire和@Inject，如果同一类型存在多个bean实例，则需要指定注入的beanName。@Autowired和@Qualifier一起使用，@Inject和@Name一起使用。
@Resource是JDK的，是基于bean的名字，即beanName，来从spring的IOC容器查找bean注入的