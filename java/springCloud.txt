SpringCloud Hystrix
为了什么？
1、对通过第三方客户端库访问的依赖项（通常是通过网络）的延迟和故障进行保护和控制。
2、在复杂的分布式系统中阻止级联故障。
3、快速失败，快速恢复。
4、回退，尽可能优雅地降级。
5、启用近实时监控、警报和操作控制。
设计原则
防止任何单个依赖项耗尽所有容器（如Tomcat）用户线程。
甩掉包袱，快速失败而不是排队。
在任何可行的地方提供回退，以保护用户不受失败的影响。
使用隔离技术（如隔离板、泳道和断路器模式）来限制任何一个依赖项的影响。
通过近实时的度量、监视和警报来优化发现时间。
通过配置的低延迟传播来优化恢复时间。
支持对Hystrix的大多数方面的动态属性更改，允许使用低延迟反馈循环进行实时操作修改。
避免在整个依赖客户端执行中出现故障，而不仅仅是在网络流量中

Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩

构建Hystrix的Command对象, 调用执行方法.
Hystrix检查当前服务的熔断器开关是否开启, 若开启, 则执行降级服务getFallback方法.
若熔断器开关关闭, 则Hystrix检查当前服务的线程池是否能接收新的请求, 若超过线程池已满, 则执行降级服务getFallback方法.
若线程池接受请求, 则Hystrix开始执行服务调用具体逻辑run方法.
若服务执行失败, 则执行降级服务getFallback方法, 并将执行结果上报Metrics更新服务健康状况.
若服务执行超时, 则执行降级服务getFallback方法, 并将执行结果上报Metrics更新服务健康状况.
若服务执行成功, 返回正常结果.
若服务降级方法getFallback执行成功, 则返回降级结果.
若服务降级方法getFallback执行失败, 则抛出异常.

Hystrix在底层使用了Spring提供的切面技术

SrpingCloud eureka
服务注册
服务提供者在启动时会将自己的信息注册到Eureka Server， Eureka Server收到信息后， 会将数据信息存储在一个双层结构的Map中，其中第一层的key是服务名，第二层的key是具体服务的实例名。

服务同步
如果有多个Eureka Server，一个服务提供者向其中一个Eureka Server注册了，这个Eureka Server会向集群内的其它Eureka Server转发这个服务提供者的注册信息，从而实现实现Eureka Server之间的服务同步

服务续约
在注册完成成后，服务提供者会维护一个心中持续发送信息给Eureka Server(注册中心)表示正常运行，以防止Eureka Server将该服务实例从服务列表中剔除。

服务下线
当服务实例正常关闭时，它会发送一个服务下线的消息给注册中心，注册中心收到信息后，会将该服务实例状态置为下线，并把该信息传播出去。

获取服务
当一个服务实例依赖另一个服务时，这时这个服务实例又充当了服务消费者，它会发送一个信息给注册中心, 请求获取注册的服务清单，注册中心会维护一份只读的服务清单来返回给服务消费者。

失效剔除
有时候，服务实例可能无法正常提供服务，而注册中心没有收到服务下线的信息。注册中心会创建一个定时任务，将超过一定时间没有服务续约消息的服务实例从服务清单中剔除。

自我保护
上面讲到失效剔除时，会将超过一定时间没有收到服务续约消息的实例从服务清单中剔除掉，在这中间还有一个逻辑。如果在运行期间，统计心跳成功的比例低于85%（心跳阈值），注册中心会将当前服务清单中的实例注册信息保护起来，让这些实例不会过期。但是在这种情况下，若服务实例出现问题，那么服务消费者可能会拿到实际已经不能正常运行的服务实例，就会出现调用失败的情况，所以客户端需要有容错机制，比如请求重试，或断路器等。

但是有一个定时任务默认每15分钟执行一次，会根据运行状况重新计算心跳阈值；但也可能不重新计算，这时，Eureka Server的自我保护状态会一直存在。

如果要关闭自我保护机制，可以将eureka.server.enable-self-preservation设置为false，以确保注册中心将不可用的服务实例及时剔除。

Srpingcloud Feign
Feign是一个声明式的Web服务客户端
Feign的一个关键机制就是使用了动态代理
首先，如果你对某个接口定义了@FeignClient注解，Feign就会针对这个接口创建一个动态代理

接着你要是调用那个接口，本质就是会调用 Feign创建的动态代理，这是核心中的核心

Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务的地址

最后针对这个地址，发起请求、解析响应

SrpingCloud ribbon
它的作用是负载均衡，会帮你在每次请求时选择一台机器，均匀的把请求分发到各个机器上
Ribbon的负载均衡默认使用的最经典的Round Robin轮询算法
首先Ribbon会从 Eureka Client里获取到对应的服务注册表，也就知道了所有的服务都部署在了哪些机器上，在监听哪些端口号。
然后Ribbon就可以使用默认的Round Robin算法，从中选择一台机器
Feign就会针对这台机器，构造并发起请求。

SpringCloud gateWay